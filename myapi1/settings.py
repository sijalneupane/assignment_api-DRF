"""
Django settings for myapi1 project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Initialise environment variables
env = environ.Env(
    DEBUG=(bool, True)
)
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read the .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
# or just # Reads .env file like below
# environ.Env.read_env() 


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")
# CORS_TRUSTED_ORIGINS = env.list("CORS_TRUSTED_ORIGINS")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'core',
    'corsheaders',
    'assignments',
    'fcm_django',
    'drf_spectacular',
    'notices',
    'subjects',
    'utils'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myapi1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myapi1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': env.db(),  # Reads the DATABASE_URL environment variable
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#added by myself for using CustomUser for authentication
AUTH_USER_MODEL = 'core.CustomUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Assignment Management API',
    'DESCRIPTION': 'A comprehensive API for managing assignments, subjects, and users in an educational system. '
                   'This API supports CRUD operations for assignments with proper authentication and authorization.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    # 'SWAGGER_UI_SETTINGS': {
    #     'deepLinking': True,
    #     'persistAuthorization': True,
    #     'displayOperationId': False,
    #     'docExpansion': 'none',
    #     # 'filter': True,
    #     'showExtensions': True,
    #     'showCommonExtensions': True,
    # },
    'TAGS': [
        {
          'name':'App Health',
          'description':'Endpoint for checking application health'
        },
        {
            'name': 'Authentication',
            'description': 'User authentication and authorization endpoints'
        },
        {
            'name': 'Assignments',
            'description': 'Assignment management operations - create, read, update, delete assignments'
        },
        {
            'name': 'Notices',
            'description': 'Notice management operations - create, read, update, delete notices'
        },
        {
            'name': 'Subjects',
            'description': 'Subject management operations - create, read, update, delete subjects'
        },
        {
            'name':'Tokens',
            'description':'Token generation, validation, and revocation operations. '
                            'It is used too generate access tokens and refresh tokens.'
        }
    ],
    'SECURITY': [
        {
            'jwtAuth': []
        }
    ],
    'COMPONENTS': {
        'securitySchemes': {
            'jwtAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
                'description': 'JWT token authentication. Obtain token from /api/token endpoint.'
            }
        }
    },
}

CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS")

CORS_ALLOW_HEADERS = env.list("CORS_ALLOW_HEADERS")

CORS_ALLOW_METHODS = env.list("CORS_ALLOW_METHODS")

CORS_ALLOWED_ORIGIN_REGEXES = env.list("CORS_ALLOWED_ORIGIN_REGEXES")

from datetime import timedelta

SIMPLE_JWT = {
    'TOKEN_OBTAIN_SERIALIZER': 'core.serializers.MyTokenObtainPairSerializer',
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1000),
    'SIGNING_KEY': SECRET_KEY,
    'ALGORITHM': 'HS256',
    "AUTH_HEADER_TYPES": ("Bearer",),
}


from firebase_admin import initialize_app, credentials
from google.auth import load_credentials_from_file
from google.oauth2.service_account import Credentials

# Custom credentials class for Firebase
class CustomFirebaseCredentials(credentials.ApplicationDefault):
    def __init__(self, account_file_path: str):
        super().__init__()
        self._account_file_path = account_file_path

    def _load_credential(self):
        if not self._g_credential:
            self._g_credential, self._project_id = load_credentials_from_file(
                self._account_file_path, scopes=credentials._scopes
            )

# Initialize Firebase
custom_credentials = CustomFirebaseCredentials(env('CUSTOM_GOOGLE_APPLICATION_CREDENTIALS'))
FIREBASE_MESSAGING_APP = initialize_app(custom_credentials, name='messaging')
# FCM Django settings
FCM_DJANGO_SETTINGS = {
    "DEFAULT_FIREBASE_APP": FIREBASE_MESSAGING_APP,
    "APP_VERBOSE_NAME": "FCM Notifications",
    "ONE_DEVICE_PER_USER": False,
    "DELETE_INACTIVE_DEVICES": False,
}


APPEND_SLASH = False

import cloudinary
import cloudinary.uploader
import cloudinary.api	
cloudinary.config( 
  	cloud_name = os.getenv("CLOUDINARY_CLOUD_NAME"),
  	api_key = os.getenv("CLOUDINARY_API_KEY"),
  	api_secret = os.getenv("CLOUDINARY_API_SECRET")
)
# # Define the upload preset details
# upload_preset_name = "my_preset"
# upload_preset_options = {
#     "unsigned": False,
#     "folder": "notices",
#     "tags": "notice",
#     "transformation": [
#         {"width": 500, "height": 700, "crop": "fill"},
#     ],
#     "categorization": "aws_rek_tagging",
#     "auto_tagging": 0.9
# }

# # Create the upload preset using the SDK
# upload_preset = cloudinary.api.create_upload_preset(
#     name=upload_preset_name,
#     settings=upload_preset_options
# )

# # Check if the upload preset was created successfully
# if upload_preset.get("name") == upload_preset_name:
#     print("Upload preset created successfully.")
# else:
#     print("Failed to create upload preset.")
